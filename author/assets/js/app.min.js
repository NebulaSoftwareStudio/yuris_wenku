var article_image = null;
var article_book_id = null;
var current_article_id = null;


var book_name = null;
var book_image = null;
var book_description = null;
var book_classify = null;

var book_edit_mode = null;
var book_edit_id = null;

!function (n) {
    "use strict";
    var t = function () {
    };
    t.prototype.initTooltipPlugin = function () {
        n.fn.tooltip && n('[data-toggle="tooltip"]').tooltip()
    }, t.prototype.initPopoverPlugin = function () {
        n.fn.popover && n('[data-toggle="popover"]').popover()
    }, t.prototype.initToastPlugin = function () {
        n.fn.toast && n('[data-toggle="toast"]').toast()
    }, t.prototype.initSlimScrollPlugin = function () {
        n.fn.slimScroll && n(".slimscroll").slimScroll({
            height: "auto",
            position: "right",
            size: "8px",
            touchScrollStep: 20,
            color: "#9ea5ab"
        })
    }, t.prototype.initFormValidation = function () {
        n(".needs-validation").on("submit", function (t) {
            return n(this).addClass("was-validated"), !1 !== n(this)[0].checkValidity() || (t.preventDefault(), t.stopPropagation(), !1)
        })
    }, t.prototype.initCustomModalPlugin = function () {
        n('[data-plugin="custommodal"]').on("click", function (t) {
            t.preventDefault(), new Custombox.modal({
                content: {
                    target: n(this).attr("href"),
                    effect: n(this).attr("data-animation")
                }, overlay: {color: n(this).attr("data-overlayColor")}
            }).open()
        })
    }, t.prototype.initCounterUp = function () {
        n(this).attr("data-delay") && n(this).attr("data-delay"), n(this).attr("data-time") && n(this).attr("data-time");
        n('[data-plugin="counterup"]').each(function (t, i) {
            n(this).counterUp({delay: 100, time: 1200})
        })
    }, t.prototype.initPeityCharts = function () {
        n('[data-plugin="peity-pie"]').each(function (t, i) {
            var e = n(this).attr("data-colors") ? n(this).attr("data-colors").split(",") : [],
                o = n(this).attr("data-width") ? n(this).attr("data-width") : 20,
                a = n(this).attr("data-height") ? n(this).attr("data-height") : 20;
            n(this).peity("pie", {fill: e, width: o, height: a})
        }), n('[data-plugin="peity-donut"]').each(function (t, i) {
            var e = n(this).attr("data-colors") ? n(this).attr("data-colors").split(",") : [],
                o = n(this).attr("data-width") ? n(this).attr("data-width") : 20,
                a = n(this).attr("data-height") ? n(this).attr("data-height") : 20;
            n(this).peity("donut", {fill: e, width: o, height: a})
        }), n('[data-plugin="peity-donut-alt"]').each(function (t, i) {
            n(this).peity("donut")
        }), n('[data-plugin="peity-line"]').each(function (t, i) {
            n(this).peity("line", n(this).data())
        }), n('[data-plugin="peity-bar"]').each(function (t, i) {
            var e = n(this).attr("data-colors") ? n(this).attr("data-colors").split(",") : [],
                o = n(this).attr("data-width") ? n(this).attr("data-width") : 20,
                a = n(this).attr("data-height") ? n(this).attr("data-height") : 20;
            n(this).peity("bar", {fill: e, width: o, height: a})
        })
    }, t.prototype.initKnob = function () {
        n('[data-plugin="knob"]').each(function (t, i) {
            n(this).knob()
        })
    }, t.prototype.init = function () {
        this.initTooltipPlugin(), this.initPopoverPlugin(), this.initToastPlugin(), this.initSlimScrollPlugin(), this.initFormValidation(), this.initCustomModalPlugin(), this.initCounterUp(), this.initPeityCharts(), this.initKnob()
    }, n.Components = new t, n.Components.Constructor = t
}(window.jQuery), function (a) {
    "use strict";
    var t = function () {
        this.$body = a("body"), this.$portletIdentifier = ".card", this.$portletCloser = '.card a[data-toggle="remove"]', this.$portletRefresher = '.card a[data-toggle="reload"]'
    };
    t.prototype.init = function () {
        var o = this;
        a(document).on("click", this.$portletCloser, function (t) {
            t.preventDefault();
            var i = a(this).closest(o.$portletIdentifier), e = i.parent();
            i.remove(), 0 == e.children().length && e.remove()
        }), a(document).on("click", this.$portletRefresher, function (t) {
            t.preventDefault();
            var i = a(this).closest(o.$portletIdentifier);
            i.append('<div class="card-disabled"><div class="card-portlets-loader"><div class="spinner-border text-primary m-2" role="status"></div></div></div>');
            var e = i.find(".card-disabled");
            setTimeout(function () {
                e.fadeOut("fast", function () {
                    e.remove()
                })
            }, 500 + 5 * Math.random() * 300)
        })
    }, a.Portlet = new t, a.Portlet.Constructor = t
}(window.jQuery), function (e) {
    "use strict";
    var t = function () {
        this.$body = e("body"), this.$window = e(window)
    };
    t.prototype._resetSidebarScroll = function () {
        e(".slimscroll-menu").slimscroll({
            height: "auto",
            position: "right",
            size: "8px",
            color: "#9ea5ab",
            wheelStep: 5,
            touchScrollStep: 20
        })
    }, t.prototype.initMenu = function () {
        var i = this;
        e(".button-menu-mobile").on("click", function (t) {
            t.preventDefault(), i.$body.toggleClass("sidebar-enable"), 768 <= i.$window.width() ? i.$body.toggleClass("enlarged") : i.$body.removeClass("enlarged"), i._resetSidebarScroll()
        }), e("#side-menu").metisMenu(), i._resetSidebarScroll(), e(".right-bar-toggle").on("click", function (t) {
            e("body").toggleClass("right-bar-enabled")
        }), e(document).on("click", "body", function (t) {
            0 < e(t.target).closest(".right-bar-toggle, .right-bar").length || 0 < e(t.target).closest(".left-side-menu, .side-nav").length || e(t.target).hasClass("button-menu-mobile") || 0 < e(t.target).closest(".button-menu-mobile").length || (e("body").removeClass("right-bar-enabled"), e("body").removeClass("sidebar-enable"))
        }), e("#side-menu a").each(function () {
            var t = window.location.href.split(/[?#]/)[0];
            // this.href == t && (e(this).addClass("active"), e(this).parent().addClass("mm-active"), e(this).parent().parent().addClass("mm-show"), e(this).parent().parent().prev().addClass("active"), e(this).parent().parent().parent().addClass("mm-active"), e(this).parent().parent().parent().parent().addClass("mm-show"), e(this).parent().parent().parent().parent().parent().addClass("mm-active"))
        }), e(".navbar-toggle").on("click", function (t) {
            e(this).toggleClass("open"), e("#navigation").slideToggle(400)
        }), e(window).on("load", function () {
            e("#status").fadeOut(), e("#preloader").delay(350).fadeOut("slow")
        })
    }, t.prototype.initLayout = function () {
        768 <= this.$window.width() && this.$window.width() <= 1028 ? this.$body.addClass("enlarged") : 1 != this.$body.data("keep-enlarged") && this.$body.removeClass("enlarged")
    }, t.prototype.init = function () {
        var i = this;
        this.initLayout(), e.Portlet.init(), this.initMenu(), e.Components.init(), i.$window.on("resize", function (t) {
            t.preventDefault(), i.initLayout(), i._resetSidebarScroll()
        })
    }, e.App = new t, e.App.Constructor = t
}(window.jQuery), function (t) {
    "use strict";
    window.jQuery.App.init()
}(), Waves.init();
//# sourceMappingURL=app.min.js.map


//select image for article
function select_article_image() {
    $("#select_file").trigger("click");
}

//article_iamge select completed.
function upload_article_image() {
    var file = $("#select_file");
    var file_dom = document.getElementById("select_file");
    var article_image_box = document.getElementById("article_image_box");
    var images = document.getElementById("select_file").files;
    // console.log(images);
    // var html_string = "";


    //将图片上传至本地服务器
    //是否选择了图片
    if (file.val() !== '') {
        //创建新的空白Data变量用于存储上传内容
        var formData = new FormData();
        formData.append("file", file_dom.files[0]);
        //上传图片
        $.ajax({
            url: "../common/api/upload/upload_images.php",
            type: "POST",
            data: formData,
            contentType: false,
            processData: false,
            success: function (data) {
                console.log(data);
                data = JSON.parse(data);
                if (data.status == "success") {
                    //暂存返回的数据
                    article_image = data.url;
                    article_image_box.innerHTML = '<img src="../' + data.url + '" alt="文章图片" style="max-width:200px;" />'
                    show_notification("success", '上传成功');
                }
                if (data.status == "error") {
                    show_notification("danger", data.msg);
                }

            },
            error: function () {
                show_notification("danger", '无法与服务器通信');
            }
        })

    }


}


function change_article_book_id(id, name) {
    let name_dom = document.getElementById("article_book_name");
    article_book_id = id;
    name_dom.innerText = name;
}


function save_article(id) {
    let article_content = $('.summernote').summernote('code');
    let article_title = document.getElementById("article_title").value;
    let article_description = document.getElementById("article_description").value;

    var images = document.getElementById("select_file").files;


    //检查数据完整性
    if ($('.summernote').summernote('isEmpty')) {
        show_notification("danger", '请编辑文章正文');
    } else if (article_title == '') {
        show_notification("danger", '请编辑文章标题');
    } else if (article_description == '') {
        show_notification("danger", '请编辑文章概述');
    } else {
        //提交数据
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '../common/api/author/save_article.php');
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function (e) {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log(xhr.responseText);
                let data = JSON.parse(xhr.responseText);
                console.log(data);
                if (data["status"] === true) {
                    show_notification("success", data.info);
                    setTimeout(function () {
                        window.location.assign("./");
                    }, 2000);
                } else {
                    show_notification("danger", '保存失败 ' + data.info);
                }


            } else {
                show_notification("danger", '无法与服务器通信');
            }
        };
        xhr.send("id=" + id + "&title=" + article_title + "&description=" + article_description + "&content=" + article_content +
            "&book_id=" + article_book_id + "&image=" + article_image);
    }
}


function show_notification() {
    alert("success!")
}


function delete_article() {
    let id = current_article_id;
    if (id !== null) {
        //提交数据
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '../common/api/auth/delete_article.php');
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function (e) {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log(xhr.responseText);
                let data = JSON.parse(xhr.responseText);
                console.log(data);
                if (data["status"] === true) {
                    $('#delete_article_modal').modal('hide');
                    show_notification("success", data.info);
                    setTimeout(function () {
                        window.location.reload();
                    }, 2000);
                } else {
                    show_notification("danger", '操作失败 ' + data.info);
                }
            } else {
                show_notification("danger", '无法与服务器通信');
            }
        };
        xhr.send("id=" + id);
    } else {
        show_notification("danger", '程序错误，请刷新页面重试');
    }

}


function update_article_info(id, item, value) {
    //提交数据
    let xhr = new XMLHttpRequest();
    xhr.open('POST', '../common/api/auth/update_article.php');
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 4 && xhr.status === 200) {
            console.log(xhr.responseText);
            let data = JSON.parse(xhr.responseText);
            console.log(data);
            if (data["status"] === true) {
                show_notification("success", data.info);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else {
                show_notification("danger", '保存失败 ' + data.info);

            }


        } else {
            show_notification("danger", '无法与服务器通信');
        }
    };
    xhr.send("id=" + id + "&item=" + item + "&value=" + value);
}


function edit_book(id) {
    if (id !== '') {
        // 根据ID获取书籍信息
        let notification_bar = $("#notification_bar");
        let notification_bar_dom = document.getElementById("notification_bar");
        let upload_image_box = document.getElementById("upload_image_box");
        //提交数据
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '../common/api/get/get_book_info.php');
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function (e) {
            if (xhr.readyState === 4 && xhr.status === 200) {
                // console.log(xhr.responseText);

                let data = JSON.parse(xhr.responseText);
                // console.log(data);

                //获取值后将数据反馈至DOM

                //设置图片
                book_image = data.cover;
                upload_image_box.innerHTML = '<img src="../' + data.cover + '" alt="书籍图片" style="width: 100%;" />'
                //设置类目
                change_book_classify(data.classify, data.classify_name)
                //设置信息
                document.getElementById("book_name").value = data.name;
                document.getElementById("book_description").value = data.description

                //设置编辑模式
                book_edit_mode = "update";
                book_edit_id = id

                //显示model
                $('#edit_book_model').modal();


            }
            // else{
            //     notification_bar_dom.classList = 'alert bg-danger text-white text-center border-0';
            //     notification_bar_dom.innerText = '无法与服务器通信';
            //     notification_bar.animate({top: "0px"}, 200);
            //     setTimeout(function () {
            //         $("#notification_bar").animate({top: "-50px"}, 200);
            //     }, 2000);
            // }
        };
        xhr.send("id=" + id);
    }
}


function select_book_image() {
    $("#select_book_image").trigger("click");
}


function get_book_image_sel() {
    var file_dom = document.getElementById("select_book_image");
    imgSel(file_dom.files[0])
}

//book_iamge select completed.
function upload_book_image(render) {
    var file = $("#select_book_image");
    var file_dom = document.getElementById("select_book_image");
    var upload_image_box = document.getElementById("upload_image_box");
    var images = document.getElementById("select_book_image").files;
    let image_size = (file_dom.files[0].size / Math.pow(1024, 2)).toFixed(2);


    //检查图片是否符合要求
    if (image_size > 2) {
        show_notification("danger", '图片体积超过 2M 限制，原图大小为 ' + image_size + 'M ,请适当压缩');
    } else if (render.width !== 2409 && render.height !== 3311) {
        show_notification("danger", '分辨率（' + render.width + ' × ' + render.height + '）不符合要求，请按照模板大小（2409px × 3311px）制作封面');
    } else {
        //将图片上传至本地服务器
        //是否选择了图片
        if (file.val() !== '') {
            //创建新的空白Data变量用于存储上传内容
            var formData = new FormData();
            formData.append("file", file_dom.files[0]);

            //上传图片
            $.ajax({
                url: "../common/api/upload/upload_book_image.php",
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    console.log(data);
                    data = JSON.parse(data);
                    if (data.status == "success") {
                        //暂存返回的数据
                        book_image = data.url;
                        upload_image_box.innerHTML = '<img src="../' + data.url + '" alt="书籍图片" style="width: 100%;" />'
                        show_notification("success", "上传成功");
                    }
                    if (data.status == "error") {
                        show_notification("danger", data.msg);
                    }

                },
                error: function () {
                    show_notification("danger", "无法与服务器通信");
                }
            })

        }
    }

}


function imgSel(file) {
    var file = file;
    var reader = new FileReader();

    reader.addEventListener("load", function () {
        var image = new Image();
        image.src = reader.result;
        image.onload = function () {
            // console.log(this.width+','+this.height)
            // return [this.width,this.height];
            upload_book_image(this)
        };
    }, false);

    if (file) {
        reader.readAsDataURL(file);
    }

}


function change_book_classify(id, name) {
    book_classify = id
    document.getElementById("book_classify_name").innerText = name
}


function save_book_info() {
    let name = document.getElementById("book_name").value;
    let description = document.getElementById("book_description").value;

    var upload_image_box = document.getElementById("upload_image_box");


    //检查数据完整性
    if (name == '') {
        show_notification("danger", "请输入书籍名称");
    } else if (description == '') {
        show_notification("danger", "请输入书籍概述");
    } else if (book_image == null) {
        show_notification("danger", "请上传书籍封面");
    } else if (book_classify == null) {
        show_notification("danger", "请选择书籍类目");
    } else {
        //上传书籍信息
        let xhr = new XMLHttpRequest();
        xhr.open('POST', '../common/api/author/save_book_info.php');
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function (e) {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log(xhr.responseText);
                let data = JSON.parse(xhr.responseText);
                console.log(data);
                if (data["status"] === true) {
                    show_notification("success", data.info);
                    setTimeout(function () {
                        window.location.reload();
                    }, 2000);
                } else {
                    show_notification("danger", '保存失败 ' + data.info);
                }
            } else {
                show_notification("danger", '无法与服务器通信');
            }
        };
        xhr.send("mode=" + book_edit_mode + "&id=" + book_edit_id + "&image=" + book_image
            + "&classify=" + book_classify + "&name=" + name + "&description=" + description);
    }

}


function delete_book(id) {
    if (id !== '') {

        book_edit_mode = "delete";
        book_edit_id = id

        $("#delete_article_modal").modal();


    }
}

function confirm_delete_book(){
    let xhr = new XMLHttpRequest();
    xhr.open('POST', '../common/api/author/save_book_info.php');
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 4 && xhr.status === 200) {
            console.log(xhr.responseText);
            let data = JSON.parse(xhr.responseText);
            console.log(data);
            if (data["status"] === true) {
                show_notification("success", data.info);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else {
                show_notification("danger", '操作失败 ' + data.info);
            }
        } else {
            show_notification("danger", '无法与服务器通信');
        }
    };
    xhr.send("mode=" + book_edit_mode + "&id=" + book_edit_id + "&image=" + book_image
        + "&classify=" + book_classify + "&name=" + book_name + "&description=" + book_description);
}


$('#edit_book_model').on('hidden.bs.modal', function () {
    /**
     * 重置已被修改的 DOM
     */
    //设置图片
    book_image = null;
    upload_image_box.innerHTML = "<div class=\"dz-message needsclick\">\n" +
        "                        <p class=\"h1 text-muted\"><i class=\"mdi mdi-cloud-upload\"></i></p>\n" +
        "                        <h3>点击此区域可上传书籍封面</h3>\n" +
        "                        <span class=\"text-muted font-13\">请上传 2409px × 3311px 大小的封面，不符合条件的图片将拒绝上传。封面制作模板（<a\n" +
        "                                    href=\"../assets/image/cover/book/book_cover.psd\"><i class=\"mdi mdi-download\"></i> PSD</a>）</span>\n" +
        "                    </div>";
    //设置类目
    change_book_classify(null, "书籍投稿类目")
    //设置信息
    document.getElementById("book_name").value = '';
    document.getElementById("book_description").value = ''

    //设置编辑模式
    book_edit_mode = null;
    book_edit_id = null;

    // show_notification('success','成功触发');

})


/**
 * 登出
 */

function account_logout() {
    let xhr = new XMLHttpRequest();
    xhr.open('POST', '../common/api/auth/logout.php');
    xhr.onreadystatechange = function (e) {
        if (xhr.readyState === 4 && xhr.status === 200) {
            console.log(xhr.responseText);
            if(xhr.responseText !== 'success'){
                show_notification("danger", '登出失败，如有必要请关闭浏览器');
            }
            else{
                window.location.assign("./");
            }
        }
        else{
            show_notification("danger", '登出失败，如有必要请关闭浏览器');
        }
    };
    xhr.send();
}


function show_notification(classify, content) {
    let notification_bar = $("#notification_bar");
    let notification_bar_dom = document.getElementById("notification_bar");

    notification_bar_dom.classList = 'alert bg-' + classify + ' text-white text-center border-0';
    notification_bar_dom.innerText = content;
    notification_bar.animate({top: "0px"}, 200);
    setTimeout(function () {
        $("#notification_bar").animate({top: "-50px"}, 200);
    }, 2000);
}

